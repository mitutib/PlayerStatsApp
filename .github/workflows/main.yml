name: CI (Build + Unit + IT + Docker)



on:
  push:
    branches: [ main ]
  pull_request:
  workflow_dispatch:

env:
  JAVA_VERSION: '17'
  DOCKER_IMAGE_NAME: playerstats
  DOCKERFILE_PATH: ./Dockerfile

jobs:
  unit-tests:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up JDK
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: ${{ env.JAVA_VERSION }}

      - name: Cache Maven
        uses: actions/cache@v4
        with:
          path: ~/.m2/repository
          key: m2-${{ hashFiles('**/pom.xml') }}

      # Rulează doar testele unitare (Surefire)
      - name: Build + Unit tests
        run: mvn -B -ntp -DskipITs=true clean test

      - name: Package (fără IT)
        run: mvn -B -ntp -DskipITs=true -DskipTests package

      - name: Upload JAR artifact
        uses: actions/upload-artifact@v4
        with:
          name: app-jar
          path: target/*.jar

  integration-tests:
    runs-on: ubuntu-latest
    needs: unit-tests
    steps:
      - uses: actions/checkout@v4

      - name: Set up JDK
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: ${{ env.JAVA_VERSION }}

      - name: Cache Maven
        uses: actions/cache@v4
        with:
          path: ~/.m2/repository
          key: m2-${{ hashFiles('**/pom.xml') }}

      # IT cu Maven Failsafe (presupune clase *IT.java).
      # Dacă folosești Testcontainers, nu ai nevoie de service extern; runnerul are Docker.
      - name: Integration tests (Failsafe)
        run: mvn -B -ntp -DskipITs=false -D
